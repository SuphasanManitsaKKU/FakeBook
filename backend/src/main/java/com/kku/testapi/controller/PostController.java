package com.kku.testapi.controller;

import com.kku.testapi.dto.PostDTO;
import com.kku.testapi.dto.PostResponseDTO;
import com.kku.testapi.entity.Post;
import com.kku.testapi.entity.User;
import com.kku.testapi.service.PostService;
import com.kku.testapi.service.UserService;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import java.util.List;

@RestController
@RequestMapping("/posts")
public class PostController {

    @Autowired
    private PostService postService;

    @Autowired
    private UserService userService; // ‡πÉ‡∏ä‡πâ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏î‡∏∂‡∏á User

    @GetMapping("/{id}")
    public PostResponseDTO getPostById(@PathVariable Integer id) {
        return postService.getPostById(id);
    }

    @PostMapping
    public ResponseEntity<Post> createPost(@RequestBody PostDTO postDTO) {
        if (postDTO.getUserId() == null) {
            return ResponseEntity.badRequest().body(null);
        }
        System.out.println("postDTO.getUserId() = " + postDTO.getUserId());
        // üîπ ‡∏î‡∏∂‡∏á User ‡∏à‡∏≤‡∏Å userId
        User user = userService.getUserById(postDTO.getUserId());
        if (user == null) {
            return ResponseEntity.badRequest().body(null);
        }
        System.out.println("user = " + user);
        // üîπ ‡∏™‡∏£‡πâ‡∏≤‡∏á Post ‡πÅ‡∏•‡πâ‡∏ß‡πÄ‡∏ã‡πá‡∏ï User
        Post post = new Post();
        post.setContent(postDTO.getContent());
        post.setUser(user);
        System.out.println("post = " + post);
        // üîπ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å Post ‡∏•‡∏á‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
        Post savedPost = postService.createPost(post);
        return ResponseEntity.ok(savedPost);
    }

    @PutMapping("/{id}")
    public ResponseEntity<PostResponseDTO> updatePost(@PathVariable Integer id, @RequestBody PostDTO postDTO) {
        if (postDTO.getUserId() == null) {
            return ResponseEntity.badRequest().build();
        }

        // üîπ ‡∏î‡∏∂‡∏á‡πÇ‡∏û‡∏™‡∏ï‡πå‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï
        Post existingPost = postService.getPostEntityById(id);
        if (existingPost == null) {
            return ResponseEntity.notFound().build();
        }

        // üîπ ‡∏î‡∏∂‡∏á User ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏ä‡πá‡∏Ñ‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏à‡πâ‡∏≤‡∏Ç‡∏≠‡∏á‡πÇ‡∏û‡∏™‡∏ï‡πå‡∏à‡∏£‡∏¥‡∏á‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
        User user = userService.getUserById(postDTO.getUserId());
        if (user == null || !existingPost.getUser().getId().equals(user.getId())) {
            return ResponseEntity.status(403).build(); // ‚ùå Forbidden: ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà‡πÄ‡∏à‡πâ‡∏≤‡∏Ç‡∏≠‡∏á‡πÇ‡∏û‡∏™‡∏ï‡πå
        }

        // üîπ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤‡πÇ‡∏û‡∏™‡∏ï‡πå
        existingPost.setContent(postDTO.getContent());
        Post updatedPost = postService.updatePost(id, existingPost);

        // üîπ ‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏õ‡πá‡∏ô `PostResponseDTO` ‡πÅ‡∏•‡πâ‡∏ß‡∏™‡πà‡∏á‡∏Å‡∏•‡∏±‡∏ö
        PostResponseDTO responseDTO = postService.convertToPostResponseDTO(updatedPost);

        return ResponseEntity.ok(responseDTO);
    }

    @DeleteMapping("/{id}")
    public void deletePost(@PathVariable Integer id) {
        postService.deletePost(id);
    }

    @GetMapping("/user-and-friends/{userId}")
    public List<PostResponseDTO> getUserAndFriendsPosts(@PathVariable Integer userId) {
        List<PostResponseDTO> posts = postService.getUserAndFriendsPosts(userId);
        System.out.println("----------------------------------------------------------------------------9");
        return posts;
    }

    @GetMapping("/user/{userId}")
    public ResponseEntity<List<PostResponseDTO>> getPostsByUser(@PathVariable Integer userId) {
        List<PostResponseDTO> userPosts = postService.getPostsByUser(userId);
        return ResponseEntity.ok(userPosts);
    }
}
